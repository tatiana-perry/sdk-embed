{"version":3,"file":"combine-reducers.js","sourceRoot":"","sources":["../src/combine-reducers.ts"],"names":[],"mappings":";;AAAA,iCAAyC;AAKzC,yBACI,QAAqC;IAErC,OAAO,UAAC,KAAK,EAAE,MAAM;QACjB,OAAA,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,UAAC,MAAM,EAAE,GAAG;YACrC,IAAM,OAAO,GAAG,QAAQ,CAAC,GAAmB,CAAC,CAAC;YAC9C,IAAM,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,GAAmB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YACpE,IAAM,QAAQ,GAAG,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YAE/C,IAAI,gBAAO,CAAC,YAAY,EAAE,QAAQ,CAAC,IAAI,MAAM,EAAE;gBAC3C,OAAO,MAAM,CAAC;aACjB;YAED,OAAO,eAAM,CAAC,EAAE,EAAE,MAAM,YAAI,GAAC,GAAG,IAAG,QAAQ,MAAG,CAAC;;QACnD,CAAC,EAAE,KAAK,IAAI,EAAY,CAAC;IAVzB,CAUyB,CAAC;AAClC,CAAC;AAfD,kCAeC","sourcesContent":["import { assign, isEqual } from 'lodash';\n\nimport Action from './action';\nimport Reducer from './reducer';\n\nexport default function combineReducers<TState, TAction extends Action = Action>(\n    reducers: ReducerMap<TState, TAction>\n): Reducer<TState, TAction> {\n    return (state, action) =>\n        Object.keys(reducers).reduce((result, key) => {\n            const reducer = reducers[key as keyof TState];\n            const currentState = state ? state[key as keyof TState] : undefined;\n            const newState = reducer(currentState, action);\n\n            if (isEqual(currentState, newState) && result) {\n                return result;\n            }\n\n            return assign({}, result, { [key]: newState });\n        }, state || {} as TState);\n}\n\nexport type ReducerMap<TState, TAction extends Action = Action> = {\n    [Key in keyof TState]: Reducer<TState[Key], TAction>;\n};\n"]}