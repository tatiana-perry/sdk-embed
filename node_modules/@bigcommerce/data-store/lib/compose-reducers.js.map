{"version":3,"file":"compose-reducers.js","sourceRoot":"","sources":["../src/compose-reducers.ts"],"names":[],"mappings":";;AAAA,iCAAwD;AA+BxD;IACI,kBAA4C;SAA5C,UAA4C,EAA5C,qBAA4C,EAA5C,IAA4C;QAA5C,6BAA4C;;IAE5C,OAAO,UAAC,KAAK,EAAE,MAAM;QACjB,IAAM,QAAQ,GAAG,kBAAS,CACtB,QAAQ;aACH,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,MAAM,KAAK,CAAC,EAApB,CAAoB,CAAC;aACvC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,mBAAU,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,EAA3B,CAA2B,CAAC,CACnD,CAAC,KAAK,CAAC,CAAC;QAET,OAAO,gBAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC;IACvD,CAAC,CAAC;AACN,CAAC;AAZD,kCAYC","sourcesContent":["import { curryRight, flowRight, isEqual } from 'lodash';\n\nimport Action from './action';\nimport Reducer from './reducer';\n\nexport default function composeReducers<TState, TStateA, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TState, action: TAction) => TStateA\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TStateA, TStateB, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TStateB, action: TAction) => TStateA,\n    reducerC: (state: TState, action: TAction) => TStateB\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TStateA, TStateB, TStateC, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TStateB, action: TAction) => TStateA,\n    reducerC: (state: TStateC, action: TAction) => TStateB,\n    reducerD: (state: TState, action: TAction) => TStateC\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TStateA, TStateB, TStateC, TStateD, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TStateB, action: TAction) => TStateA,\n    reducerC: (state: TStateC, action: TAction) => TStateB,\n    reducerD: (state: TStateD, action: TAction) => TStateC,\n    reducerE: (state: TState, action: TAction) => TStateD\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TAction extends Action = Action>(\n    ...reducers: Array<Reducer<TState, TAction>>\n): Reducer<TState, TAction> {\n    return (state, action) => {\n        const newState = flowRight(\n            reducers\n                .filter(reducer => reducer.length === 2)\n                .map(reducer => curryRight(reducer)(action))\n        )(state);\n\n        return isEqual(state, newState) ? state : newState;\n    };\n}\n"]}